{"version":3,"sources":["util/palette.ts","components/SolutionCanvas.tsx","components/Hide.tsx","components/SolutionDisplay.tsx","util/recursive.ts","components/SolutionBuilder.tsx","components/Footer.tsx","App.tsx","index.tsx"],"names":["style","generatePalette","rng","min","max","Math","floor","random","palette","step","map","color","colors","Object","toConsumableArray","i","push","c","paletteRGB","value","concat","background","backgroundImage","SolutionCanvas","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rods","rodsNr","canvas","ctx","getWidthOfTheLargestDisc","discs","getHeigth","getWidth","width","height","refs","getContext","drawBase","_this2","widthOfTheLargestDisc","rodHeight","rodSpot","rodInterval","Array","fill","rod","spot","fillStyle","fillRect","beginPath","lineWidth","moveTo","lineTo","forEach","stroke","drawDiscs","_this3","discsAtRod","discWidth","discLocations","disc","discInitY","discInitX","strokeStyle","strokeRect","react_default","a","createElement","ref","React","Component","Hide","className","hidden","children","SolutionDisplay","_React$Component","componentDidUpdate","oldProps","solutionId","console","log","setState","currentIndex","timer","clearInterval","setInterval","cycleSolution","getAnimationSpeed","newIndex","solution","length","from","to","newLocations","lastIndexOf","getOptimalMoveCount","pow","getProgressPercentage","displayTimeRemaining","timeLeft_ms","now","Date","distanceInWordsStrict","addMilliseconds","getProgressBar","margin","paddingTop","index_esm","percentage","strokeWidth","styles","path","strokeLinecap","text","currentId","inherits","createClass","key","SolutionCanvas_SolutionCanvas","solve","numberOfDiscs","b","name","move","n","source","target","aux","pop","SolutionBuilder","setDiscs","event","discAmount","setSolution","htmlFor","type","onChange","onClick","Footer","href","App","SolutionBuilder_SolutionBuilder","SolutionDisplay_SolutionDisplay","components_Footer","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.5e62f1a1.chunk.js","sourcesContent":["let style = {};\r\n\r\nconst generatePalette = () => {\r\n  const rng = (min: number, max: number) => Math.floor(Math.random() * (max - min)) + min;\r\n\r\n  const palette = [];\r\n  const targetColor = [rng(50, 220), rng(50, 220), rng(50, 220)];\r\n  const step = targetColor.map(color => color / 22);\r\n  let colors = [...step];\r\n\r\n  for (let i = 0; i < 20; i++) {\r\n    palette.push(colors);\r\n    colors = colors.map((c, i) => c + step[i]);\r\n  }\r\n\r\n  const paletteRGB = palette.map(value => `rgb(${Math.floor(value[0])}, ${Math.floor(value[1])}, ${Math.floor(value[2])})`);\r\n\r\n  // document.body.style.background = paletteRGB[10];\r\n  // document.body.style.backgroundImage = `repeating-linear-gradient(\r\n  //                                     -45deg,\r\n  //                                     ${paletteRGB[10]} 0px 30px,\r\n  //                                     ${paletteRGB[16]} 30px 60px\r\n  //                                   )`\r\n  style = { background: paletteRGB[10], backgroundImage: `repeating-linear-gradient(\r\n    -45deg,\r\n    ${paletteRGB[10]} 0px 30px,\r\n    ${paletteRGB[16]} 30px 60px\r\n  )`}\r\n\r\n  return paletteRGB\r\n}\r\n\r\nlet palette = generatePalette();\r\n\r\n\r\nfunction newPalette() {\r\n  palette = generatePalette();\r\n}\r\n\r\nexport { palette, newPalette, style }\r\n","import React from 'react';\r\nimport { palette } from '../util/palette'; \r\n\r\nexport interface SolutionCanvasProps {\r\n  discs: number;\r\n  discLocations: number[]\r\n}\r\n\r\ninterface SolutionCanvasState {\r\n  width: number,\r\n  height: number\r\n}\r\n\r\nexport default class SolutionCanvas extends React.Component<SolutionCanvasProps> {\r\n  state: SolutionCanvasState;\r\n\r\n  rods: number[];\r\n  rodsNr: number;\r\n  canvas: HTMLCanvasElement;\r\n  ctx: CanvasRenderingContext2D;\r\n\r\n  constructor(props: SolutionCanvasProps) {\r\n    super(props);\r\n    this.rodsNr = 3;\r\n    this.state = {width: 100, height: 100};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.canvas = this.refs.canvas as HTMLCanvasElement;\r\n    this.ctx = this.canvas.getContext(\"2d\");\r\n    this.drawBase();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.drawBase();\r\n  }\r\n\r\n  getWidthOfTheLargestDisc = () => 40 + (20 * this.props.discs)\r\n  // height and width of the canvas\r\n  getHeigth = () => (this.props.discs * 20) + 60;\r\n  getWidth = () => this.getWidthOfTheLargestDisc() * this.rodsNr + (20 * this.rodsNr);\r\n\r\n  /**\r\n   * Draws the background and the rods\r\n   */\r\n  drawBase() {\r\n    const widthOfTheLargestDisc = this.getWidthOfTheLargestDisc();\r\n    const width = this.getWidth();\r\n    const height = this.getHeigth();\r\n    const rodHeight = height - 40;\r\n\r\n    // calculating the places for the rods\r\n    let rodSpot = 20 + widthOfTheLargestDisc / 2;\r\n    let rodInterval = widthOfTheLargestDisc + 10;\r\n    this.rods = new Array(this.rodsNr).fill(null);\r\n    this.rods = this.rods.map(rod => {\r\n      const spot = rodSpot;\r\n      rodSpot += rodInterval;\r\n      return spot\r\n    });\r\n\r\n    // fill background\r\n    this.ctx.fillStyle = '#ffffff';\r\n    this.ctx.fillRect(0, 0, width, height);\r\n\r\n    // draw the ground and the rods\r\n    this.ctx.beginPath();\r\n    this.ctx.lineWidth = 4;\r\n    this.ctx.moveTo(0, height - 10);\r\n    this.ctx.lineTo(width, height - 10);\r\n    this.rods.forEach(rod => {\r\n      this.ctx.moveTo(rod, height - 10);\r\n      this.ctx.lineTo(rod, (height - 10) - rodHeight);\r\n    })\r\n\r\n    this.ctx.stroke();\r\n\r\n    this.drawDiscs();\r\n  }\r\n\r\n  /**\r\n   * Draws the discs\r\n   */\r\n  drawDiscs() {\r\n    // this keeps count of how many discs there already are on a rod so we can calculate\r\n    // the correct y position\r\n    const discsAtRod = Array(this.rodsNr).fill(0);\r\n    let discWidth = this.getWidthOfTheLargestDisc();\r\n\r\n    // drawing the discs one at a time, starting from the largest\r\n    this.props.discLocations.forEach((disc, i) => {\r\n\r\n      // calculating where to draw the disc\r\n      const discInitY = this.getHeigth() - 10 - (discsAtRod[disc] * 20) - 20;\r\n      const discInitX = this.rods[disc] - (discWidth / 2);\r\n\r\n      // pick a color from the palette\r\n      this.ctx.fillStyle = palette[Math.floor((i / this.props.discs)* 20)];\r\n\r\n      // draw the disc\r\n      this.ctx.fillRect(discInitX, discInitY, discWidth, 20);\r\n\r\n      // draw the outline for the disc\r\n      this.ctx.strokeStyle = 'black';\r\n      this.ctx.lineWidth = 3;\r\n      this.ctx.strokeRect(discInitX, discInitY, discWidth, 20)\r\n\r\n      discWidth -= 20;\r\n      discsAtRod[disc] += 1;\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <canvas ref=\"canvas\" width={this.getWidth()} height={this.getHeigth()}/>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './hide.css';\r\n\r\ninterface HideProps {\r\n  hidden: boolean\r\n}\r\n\r\nexport function Hide (props) {\r\n  return (\r\n    <div className={props.hidden ? 'hidden' : 'visible'}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport CircularProgressbar from 'react-circular-progressbar';\r\nimport { distanceInWordsStrict, addMilliseconds } from 'date-fns'\r\nimport { Solution } from '../util/towers.interface';\r\nimport SolutionCanvas from './SolutionCanvas';\r\nimport { palette } from '../util/palette';\r\nimport { Hide } from './Hide';\r\n\r\nexport interface SolutionDisplayProps {\r\n  discs: number;\r\n  solution: Solution;\r\n  solutionId: number;\r\n}\r\n\r\ninterface SolutionDisplayState {\r\n  currentId: number;\r\n  currentIndex: number;\r\n  timer: NodeJS.Timeout;\r\n  discLocations: number[];\r\n}\r\n\r\nexport class SolutionDisplay extends React.Component<SolutionDisplayProps> {\r\n  state: SolutionDisplayState\r\n\r\n  constructor(props: SolutionDisplayProps) {\r\n    super(props);\r\n    this.state = {\r\n      currentId: null,\r\n      currentIndex: null,\r\n      timer: null,\r\n      discLocations: [0, 0, 0, 0, 0],\r\n    };\r\n  }\r\n\r\n  componentDidUpdate = (oldProps: SolutionDisplayProps) => {\r\n    if (oldProps.solutionId !== this.props.solutionId) {\r\n      console.log('new solution received');\r\n      const discLocations = [];\r\n      for (let i = 0; i < this.props.discs; i++) {\r\n        discLocations.push(0);\r\n      }\r\n      this.setState({\r\n        currentIndex: -1,\r\n        discLocations\r\n      });\r\n      if(this.state.timer) {\r\n        clearInterval(this.state.timer);\r\n      }\r\n      const timer = setInterval(this.cycleSolution, this.getAnimationSpeed(this.props.discs));\r\n      this.setState({timer});\r\n    }\r\n  }\r\n\r\n  cycleSolution = () => {\r\n    const newIndex = this.state.currentIndex + 1;\r\n    if (newIndex >= this.props.solution.length) {\r\n      clearInterval(this.state.timer)\r\n      this.setState({\r\n        timer: null\r\n      })\r\n    } else {\r\n      const from = this.props.solution[newIndex][0];\r\n      const to = this.props.solution[newIndex][1];\r\n      const newLocations = [...this.state.discLocations];\r\n      newLocations[newLocations.lastIndexOf(from)] = to;\r\n      this.setState({ discLocations: newLocations, currentIndex: newIndex });\r\n    }\r\n  }\r\n\r\n  getAnimationSpeed = (discs: number): number => {\r\n    if (discs < 6) {\r\n      return 750;\r\n    } else if (discs < 11) {\r\n      return 500;\r\n    } else if (discs < 16) {\r\n      return 200;\r\n    } else {\r\n      return 50;\r\n    }\r\n  }\r\n\r\n  getOptimalMoveCount = (): number => (2 ** this.props.discs) - 1\r\n\r\n  getProgressPercentage = () : number => {\r\n    if (!this.state.timer) {\r\n      return 0;\r\n    }\r\n    const progressPercentage = (this.state.currentIndex / this.props.solution.length) * 100;\r\n    return progressPercentage;\r\n  }\r\n\r\n  displayTimeRemaining = () => {\r\n    if (!this.state.timer) {\r\n      return 'n/a';\r\n    }\r\n    const movesLeft = this.props.solution.length - this.state.currentIndex;\r\n    const timeLeft_ms = movesLeft * this.getAnimationSpeed(this.props.discs);\r\n\r\n    const now = new Date();\r\n    const description = distanceInWordsStrict(now, addMilliseconds(now, timeLeft_ms));\r\n    return description + ' remaining';\r\n  }\r\n\r\n  getProgressBar = (): any => {\r\n    return(\r\n      <div \r\n        style={{width:'50px', margin:'auto', paddingTop:'10px'}}\r\n      >\r\n        <CircularProgressbar \r\n          percentage={this.getProgressPercentage()}\r\n          strokeWidth={25}\r\n          styles={{\r\n            path: { strokeLinecap: \"butt\", stroke: palette[Math.floor(this.getProgressPercentage() / 6)] },\r\n            text: { fill: \"#000\" }\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <SolutionCanvas discs={this.props.discs} discLocations={this.state.discLocations}/><br />\r\n        {`${this.state.currentIndex + 1} / ${this.getOptimalMoveCount()}`}\r\n        <Hide hidden={!this.state.timer}>\r\n          {this.getProgressBar()}\r\n          {this.displayTimeRemaining()}\r\n        </Hide>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import { Solution } from \"./towers.interface\";\r\n\r\ninterface Rod extends Array<number> {\r\n  name?: number;\r\n}\r\n\r\nexport default function solve (numberOfDiscs: number): Solution {\r\n  const a: Rod = Array(numberOfDiscs).fill(null).map((a, i) => i + 1);\r\n  const b: Rod = [];\r\n  const c: Rod = [];\r\n  a.name = 0;\r\n  b.name = 1;\r\n  c.name = 2;\r\n  const solution: Solution = [];\r\n  move(numberOfDiscs, a, c, b, solution);\r\n\r\n  return solution;\r\n}\r\n\r\nfunction move(n: number, source: Rod, target: Rod, aux: Rod, solution: Solution) {\r\n  if (n > 0) {\r\n    move(n - 1, source, aux, target, solution);\r\n    target.push(source.pop());\r\n    solution.push([source.name, target.name]);\r\n    move(n - 1, aux, target, source, solution);\r\n  }\r\n}\r\n","import React from 'react'\r\nimport solve from '../util/recursive';\r\nimport './solutionBuilder.css';\r\nimport { Solution } from '../util/towers.interface';\r\nimport { newPalette } from '../util/palette';\r\n\r\nexport interface SolutionBuilderProps {\r\n  setSolution: (discs: number, solution: Solution) => void;\r\n}\r\n\r\ninterface SolutionBuilderState {\r\n  discAmount: number\r\n}\r\n\r\nexport class SolutionBuilder extends React.Component<SolutionBuilderProps> {\r\n  state: SolutionBuilderState;\r\n\r\n  constructor(props: SolutionBuilderProps) {\r\n    super(props);\r\n    this.state = {\r\n      discAmount: 5\r\n    };\r\n  }\r\n\r\n  setDiscs = (event) => {\r\n    this.setState({\r\n      discAmount: event.target.value\r\n    });\r\n  }\r\n\r\n  solve = () => {\r\n    const solution: Solution = solve(this.state.discAmount);\r\n    this.props.setSolution(this.state.discAmount, solution);\r\n    newPalette();\r\n  }\r\n \r\n  render() {\r\n    return(\r\n      <div className=\"solution\">\r\n        <label htmlFor=\"discs\">Set the number of discs</label>\r\n        <input\r\n          name=\"discs\"\r\n          type=\"range\"\r\n          min=\"3\"\r\n          max=\"20\"\r\n          value={this.state.discAmount}\r\n          onChange={this.setDiscs}\r\n        />\r\n        <span className=\"number\">{this.state.discAmount}</span>\r\n        <button onClick={this.solve}>Solve</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './footer.css'\r\n\r\nconst Footer: React.FC = () => {\r\n  return(\r\n    <div className=\"footer\">\r\n      <hr />\r\n      🌞 <a href=\"https://en.wikipedia.org/wiki/Tower_of_Hanoi\">Wikipedia</a> | ver .06 |<a href=\"https://github.com/jvuor/hanoi-towers\">Github</a> 🌞\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport 'normalize.css';\r\nimport './App.css';\r\nimport { SolutionDisplay } from './components/SolutionDisplay';\r\nimport { SolutionBuilder } from './components/SolutionBuilder';\r\nimport { Solution } from './util/towers.interface';\r\nimport Footer from './components/Footer';\r\nimport { style } from './util/palette';\r\n\r\ninterface AppState {\r\n  discs: number,\r\n  solution: Solution,\r\n  solutionId: number;\r\n}\r\n\r\nclass App extends React.Component {\r\n  state: AppState;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      discs: 5,\r\n      solution: null,\r\n      solutionId: 0\r\n    }\r\n  }\r\n\r\n  setSolution = (discs: number, solution: Solution) => {\r\n    this.setState({discs, solution, solutionId: this.state.solutionId + 1});\r\n  }\r\n\r\n  render() {\r\n    console.log(style);\r\n    return (\r\n      <div className=\"center\" style={style}>\r\n        <div>\r\n          <div className=\"container container-header\">\r\n            <div className=\"header-effect\">\r\n              Tower of Hanoi\r\n            </div>\r\n          </div>\r\n          <div className=\"container container-app\">\r\n            <SolutionBuilder setSolution={this.setSolution} />\r\n            <SolutionDisplay discs={this.state.discs} solution={this.state.solution} solutionId={this.state.solutionId} />\r\n            <Footer />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}